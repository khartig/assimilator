/*
 * Copyright 2008 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.rioproject.system.capability

/**
 * Writes out a {@link org.rioproject.system.capability.PlatformCapability} to
 * an XML document.
 *
 * @author Dennis Reedy
 */
class PlatformCapabilityWriter {

    /**
     * Write a PlatformCapability to an XML document
     *
     * @param pCap The <tt>PlatformCapability</tt> to write
     * @param configPath Parent directory to store the generated file
     */
    public def String write(PlatformCapability pCap, String configPath) {
        def writer = new StringWriter()
        def bldr = new groovy.xml.MarkupBuilder(writer)
        Map<String, Object> capabilities = pCap.getCapabilities()
        def pCapVersion = capabilities.get(PlatformCapability.VERSION)
        def pCapManufacturer = capabilities.get(PlatformCapability.MANUFACTURER)
        //def pCapNative = capabilities.get(PlatformCapability.NATIVE_LIBS)

        if(!configPath.endsWith(File.separator))
            configPath += File.separator
        def fileName =
            configPath+pCap.getName().toLowerCase().replace(" ", "-")+".xml"

        writer.write("<!-- Generated by "+System.getProperty("user.name")+
                     " on "+new Date()+" -->\n")
        bldr.platform {
            capability(name: ""+pCap.getName()+"", common: "no") {

                if(pCap.description)
                    description(pCap.description)

                if(pCapVersion)
                    version(pCapVersion)

                if(pCapManufacturer)
                    manufacturer(pCapManufacturer)

                if(pCap.classPath) {
                    def classPath = ""
                    pCap.classPath.each { element ->
                        classPath += element + " "
                    }
                    classpath(classPath)
                }

                if(pCap.path)
                    path(pCap.path)

                if(pCap.getResourceCostModel())
                    costmodel(pCap.getResourceCostModel().class.name)

                /* TODO: need to find a away to write out <native> in the
                 * generated XML. The approach below uses the keyword 'native'
                 */
                //if(pCapNative)
                //    native(pCapNative)

            }
        }
        writer.write("\n")
        def fw = new FileWriter(fileName)
        fw.write(writer.toString())
        fw.close()
        return fileName
    }
}
