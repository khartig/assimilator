/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jini.rio.bean.spring;

import org.jini.rio.bean.BeanFactory;
import org.jini.rio.core.JSBInstantiationException;
import org.jini.rio.core.jsb.ServiceBeanContext;
import org.jini.rio.core.jsb.ServiceBeanManager;
import org.jini.rio.jsb.JSBManager;
import org.jini.rio.opstring.spring.ServiceBeanDefinitionParser;
import org.springframework.context.ApplicationContext;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Instantiates a Plain Old Java Object (POJO) using Spring, providing support
 * for remote invocations and administration by adapting the POJO into the
 * framework using the Spring framework.
 *
 * <p>Declaring this bean factory is done as follows:
 * <pre>
 * &lt;Configuration&gt;
 *     &lt;Component Name="service.download"&gt;
 *         &lt;Parameter Name="serviceBeanFactory"
 *                    Value="new org.jini.rio.bean.spring.SpringBeanFactory()"/&gt;
 *     &lt;/Component&gt;
 * &lt;/Configuration&gt;
 * </pre>
 *
 * @see org.jini.rio.core.jsb.ServiceBeanFactory
 * @see org.jini.rio.bean.BeanFactory
 */
public class SpringBeanFactory extends BeanFactory {
    /** Codebase token to be replaced by the service's actual token */
    static final String CODEBASE_TOK = "$codebase";
    /** Codebase token to be replaced by the service's actual token */
    static final String CLASSPATH_TOK = "$classpath";
    /** How to download the Spring ApplicationContext */
    enum ContextLoadType {CODEBASE, CLASSPATH, BYTE_ARRAY}
    ContextLoadType loadType;
    /** Component name for the logger */
    static final String COMPONENT = "org.jini.rio.bean.spring";
    /** A Logger */
    static final Logger logger = Logger.getLogger(COMPONENT);

    /**
     * Get the bean object
     */
    protected Object getBean(ServiceBeanContext context) throws Exception {
        byte[] contextBytes =
            (byte[])context.getInitParameter("spring.config");

        String[] configs = new String[0];
        if(contextBytes!=null) {
            loadType = ContextLoadType.BYTE_ARRAY;
        } else {
            configs = (String[])context.getConfiguration().
                getEntry("spring",
                         "config",
                         String[].class,
                         new String[]{""});
            if(configs.length==0) {
                throw new JSBInstantiationException("No Spring service " +
                                                    "configuration");
            }

            String codebase =
                context.getServiceElement().getExportBundles()[0].getCodebase();
            for(int i=0; i<configs.length; i++) {
                if(configs[i].indexOf(CODEBASE_TOK+"/")!=-1) {
                    configs[i] = replace(configs[i], CODEBASE_TOK+"/", codebase);
                    loadType = ContextLoadType.CODEBASE;
                    if(logger.isLoggable(Level.FINE))
                        logger.fine("Loading application context " +
                                    "["+configs[i]+"]");
                } else if (configs[i].indexOf(CLASSPATH_TOK+"/")!=-1) {
                    loadType = ContextLoadType.CLASSPATH;
                    configs[i] = replace(configs[i], CLASSPATH_TOK+"/", codebase);
                    if(logger.isLoggable(Level.FINE))
                        logger.fine("Loading application context " +
                                    "["+configs[i]+"]");
                } else {
                    loadType = ContextLoadType.CODEBASE;
                    configs[i] = replace(configs[i], CODEBASE_TOK, codebase);
                    if(logger.isLoggable(Level.FINE))
                        logger.fine("Loading application context "+
                                    "["+configs[i]+"]");
                }
            }
        }
        final Thread currentThread = Thread.currentThread();
        ClassLoader cCL =
            AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
                public ClassLoader run() {
                    return (currentThread.getContextClassLoader());
                }
            });
        /*
         * Reflection is used here because Spring technology classes may be
         * loaded by a child classloader of the the classloader which loaded
         * this class. If this is the case then we will be facing
         * NoClassDefFoundError exceptions.
         */
        /*
        GenericApplicationContext ctx = new GenericApplicationContext();
        ctx.setClassLoader(cCL);
        */

        Class ctxClass =
            Class.forName(
                "org.springframework.context.support.GenericApplicationContext",
                true,
                cCL);
        Object ctx = ctxClass.newInstance();

        Method ctx_setClassLoader = ctxClass.getMethod("setClassLoader",
                                                       ClassLoader.class);
        ctx_setClassLoader.invoke(ctx, cCL);

        //XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx);
        Class xmlReaderClass =
            Class.forName(
                "org.springframework.beans.factory.xml.XmlBeanDefinitionReader",
                true,
                cCL);
        Constructor[] cons = xmlReaderClass.getConstructors();
        Object xmlReader = null;
        for (Constructor con : cons) {
            Class[] types = con.getParameterTypes();
            if (types.length == 1 &&
                types[0].getName().indexOf("BeanDefinitionRegistry") != -1) {
                xmlReader = con.newInstance(ctx);
                break;
            }
        }

        Method[] methods = xmlReaderClass.getMethods();
        Method xmlReader_loadBeanDefinitions = null;
        for (Method method : methods) {
            if (method.getName().equals("loadBeanDefinitions")) {
                Class[] types = method.getParameterTypes();
                for (Class type : types) {
                    if (type.getName().equals(
                        "org.springframework.core.io.Resource")) {
                        xmlReader_loadBeanDefinitions = method;
                        break;
                    }
                }
                if (xmlReader_loadBeanDefinitions != null)
                    break;
            }
        }

        String resourceClassName;
        switch(loadType) {
            case CODEBASE:
                resourceClassName = "org.springframework.core.io.UrlResource";
                break;
            case CLASSPATH:
                resourceClassName = "org.springframework.core.io.ClassPathResource";
                break;
            default:
                resourceClassName = "org.springframework.core.io.ByteArrayResource";
        }

        Class resourceClass = Class.forName(resourceClassName, true, cCL);

        if(loadType==ContextLoadType.BYTE_ARRAY) {
            Constructor resourceCons = resourceClass.getConstructor(byte[].class);
            Object resource =
                resourceCons.newInstance(new Object[]{contextBytes});
            if(xmlReader_loadBeanDefinitions==null)
                throw new IllegalStateException("expected to have a " +
                                                "loadBeanDefinitions method in " +
                                                xmlReaderClass.getName());
            xmlReader_loadBeanDefinitions.invoke(xmlReader, resource);
        } else {
            Constructor resourceCons = resourceClass.getConstructor(String.class);
            for (String config : configs) {
                Object resource = resourceCons.newInstance(config);
                if(xmlReader_loadBeanDefinitions==null)
                    throw new IllegalStateException("expected to have a " +
                                                    "loadBeanDefinitions method in " +
                                                    xmlReaderClass.getName());
                xmlReader_loadBeanDefinitions.invoke(xmlReader, resource);
            }
        }

        /*
        for(int i=0; i<configs.length; i++) {
            xmlReader.loadBeanDefinitions(new UrlResource(configs[i]));
        }
        ctx.refresh();
        */

        Method ctx_refresh = ctxClass.getMethod("refresh", (Class[])null);
        ctx_refresh.invoke(ctx, (Object[])null);

        ServiceBeanManager mgr = context.getServiceBeanManager();
        if(mgr instanceof JSBManager) {
            SpringDiscardManager sdm =
                new SpringDiscardManager(ctx,
                                         context.getServiceBeanManager().
                                             getDiscardManager());
            ((JSBManager)mgr).setDiscardManager(sdm);
        } else {
            logger.warning("Unable to set Spring DiscardManager, " +
                           "unrecognized ServiceBeanManager");
        }

        String defaultName = context.getServiceElement().getName();
        String beanName =
            (String)context.getConfiguration().getEntry("spring",
                                                        "beanName",
                                                        String.class,
                                                        defaultName);
        Method ctx_getBean = ctxClass.getMethod("getBean",
                                                String.class);
        ServiceBeanDefinitionParser.ServiceElementBean elemBean =
            (ServiceBeanDefinitionParser.ServiceElementBean)
                ctx_getBean.invoke(ctx, context.getServiceElement().getName());
        ApplicationContext ctxt = (ApplicationContext)ctx;
        String s = elemBean.getBeanRef();
        if(ctxt.containsBeanDefinition(elemBean.getBeanRef())) {

        }
        Object bean = ctx_getBean.invoke(ctx, beanName);
        return(bean);

        //return(ctx.getBean(context.getServiceElement().getName()));

    }

    /*
     * Regular Expression Search and Replace
     */
    String replace(String str, String pattern, String replace) {
        int s = 0;
        int e;
        StringBuffer result = new StringBuffer();

        while((e = str.indexOf(pattern, s)) >= 0) {
            result.append(str.substring(s, e));
            result.append(replace);
            s = e+pattern.length();
        }
        result.append(str.substring(s));
        return result.toString();
    }
}