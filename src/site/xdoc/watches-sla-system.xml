<?xml version="1.0" encoding="UTF-8"?>
<document>
    <body>
        <section name="System Watches">
            <p>
                By Default Rio creates watches for depletion oriented compute
                resource capabilities. The current system watches include:
            </p>
            <ul>
                <li>CPU (machine and process)</li>
                <li>Memory (machine and process)</li>
                <li>Disk space</li>
            </ul>
            <p>
                The diagram below illustrates the interactions between the
                components involved with monitoring, registration and notification
                of system properties:
            </p>
            <img src="images/system-sla.png"/>
            <p>
                The area constrained by the ----  boundary indicates the Rio
                <tt>ComputeResource</tt>. The <tt>ComputeResource</tt> represents an abstract
                notion of a compute resource that offers computational resources
                that can be measured, and which correlate to qualitative and
                quantitative capabilities.
            </p>
            <ul>
                <li>
                    A <tt>ComputeResource</tt> has qualitative capabilities,
                    represented as <tt>PlatformCapability</tt> classes, indicating
                    a specific type of mechanism or quality associated with a
                    compute resource (software, operating system, drivers, libraries, etc...)
                </li>
                <li>
                    A <tt>ComputeResource</tt> has quantitative capabilities,
                    represented as <tt>MeasurableCapability</tt> classes, that
                    relate to depletion oriented resources such as CPU, Memory,
                    Disk Space and others.
                </li>
            </ul>
            <p>
                The <tt>ComputeResource</tt> creates (and updates) a <tt>ResourceCapability</tt> 
                object when it registers for availability to discovered Provision Monitor instances.
                This allows the Provisioner to match service requirements to compute resource capabilities.
            </p>
            <p>
                For each <tt>MeasurableCapability</tt>, there is a
                corresponding <tt>MeasurableMonitor</tt>. The <tt>MeasurableMonitor</tt>
                provides platform specific monitoring of the compute resource
                attribute being observed.
            </p>
            <p>
                If a service has declared SLA requirements that include one of
                the monitored system resources, the wiring up of the service's
                corresponding <tt>SLAPolicyHandler</tt> is handled by the Cybernode.
            </p>
            <p>
                Since the <tt>MeasurableCapability</tt> is a <tt>Watch</tt>
                (it extends the <tt>PeriodicWatch</tt>), a <tt>ThresholdManager</tt>
                registers for the notification of out of bound values. For example,
                if memory utilization goes beyond the declared threshold of 90%,
                the associated <tt>SLAPolicyHandler</tt> is invoked and it takes
                action. Based on the 'type' of policy handler you choose will
                determine if the <tt>SLAPolicyHandler</tt> invokes methods on the
                Provision Monitor, having it increment, decrement, relocate
                (or take other action).
            </p>
            <p>
                Examples of declaring SLAs for system watches follow:
            </p>

<pre name="code">
systemRequirements {
    utilization id:'CPU', high:0.8
}
</pre>
            <p>
                This example shows how you can declare that the service will not
                be allocate to a compute resource whose CPU utilization is greater
                then 80%. Similar declaration can be made for 'Memory and 'DiskSpace'.
            </p>

<pre name="code">
systemRequirements {
    utilization id:'CPU', high:0.8
}
</pre>
            <p>
                This example shows how you can declare that the service will
                scale up if CPU utilization exceeds 80% (to a max of 3 services),
                and scale down if CPU utilization drops below 20%.
            </p>
            <p>
                The upper and lower 'dampeners' are properties that allow the
                scaling policy handlers to avoid values that oscillate across an
                upper or lower boundary. In this case, scaling behavior (increment
                or decrement) will only take place if the threshold condition is
                still an issue 3 seconds after the threshold has been breached.
                If the threshold has been cleared (falls back within acceptable range),
                then the increment or decrement action will not take place.
            </p>
        </section>
    </body>

</document>