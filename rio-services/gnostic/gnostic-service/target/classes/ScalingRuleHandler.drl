template header

highThreshold
lowThreshold
watchID
maxServices
minServices
serviceName
opStringName

package org.rioproject.gnostic;

import org.rioproject.watch.Calculable;
import function org.rioproject.gnostic.DeployedServiceContext.getServiceCount;
global org.rioproject.gnostic.DeployedServiceContext context;

declare Calculable
    @role(event)
    @timestamp(date)
end

template "scaling"

rule "[@{opStringName}].[@{serviceName}] Increment Rule"
when
    /*
     * The average watched value is > the highThreshold for a period of time
     * and the number of services is < maxService count or maxServices is -1
     */
     $v : Number(doubleValue > @{highThreshold})
              from accumulate(Calculable(id == "@{watchID}", $value : value) over window:time(1m)
              from entry-point "calculables-stream", average($value))
          eval(@{maxServices}==-1 || getServiceCount("@{serviceName}", "@{opStringName}") < @{maxServices})
then
    /* increment the number of services by 1 */
    context.increment("@{serviceName}", "@{opStringName}");
end

rule "@{opStringName}].[@{serviceName}] Decrement Rule"
when
    /*
     * The average watched value is < the lowThreshold for a period of time
     * and the number of services is > minService count
     */
      $v : Number(doubleValue < @{lowThreshold})
        from accumulate(Calculable(id == "@{watchID}", $value : value) over window:time(1m)
        from entry-point "calculables-stream", average($value))
        eval(getServiceCount("@{serviceName}", "@{opStringName}") > @{minServices})

then
    /* decrement the number of services by 1 */
    context.decrement("@{serviceName}", "@{opStringName}");
end

end template